services:
  # Redis service
  redis:
    image: redis:7-alpine
    container_name: mirror-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mirror-network

  # Mirror streaming server
  mirror:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: mirror-server
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "8443:8443/udp"  # HTTP/3 (QUIC)
      - "9090:9090"      # Metrics
    volumes:
      - ../configs:/etc/mirror/configs:ro
      - ../certs:/app/certs:ro
      - mirror-logs:/var/log/mirror
    environment:
      - MIRROR_SERVER_HTTP3_PORT=8443
      - MIRROR_REDIS_ADDRESSES=redis:6379
      - MIRROR_LOGGING_LEVEL=debug
      - MIRROR_LOGGING_OUTPUT=/var/log/mirror/mirror.log
    # GPU support - uncomment if NVIDIA GPU is available
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]
    networks:
      - mirror-network
    command: ["/usr/local/bin/mirror", "-config", "/etc/mirror/configs/docker.yaml"]

  # Prometheus for metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: mirror-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - mirror-network
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: mirror-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - mirror-network
    profiles:
      - monitoring

volumes:
  redis-data:
    driver: local
  mirror-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  mirror-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16